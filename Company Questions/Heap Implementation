#include<bits/stdc++.h>
using namespace std;

class Heap{
    vector<int> v;
    bool minheap;

    bool comp(int a, int b){
        if(minheap==true) return a<b;
        else return a>b;
    }

    void heapify(int i, int n){
        int left = 2*i;
        int right = left+1;
        int min_ind = i;
        if(left<= n && comp(v[left],v[min_ind])) min_ind = left;
        if(right<= n && comp(v[right],v[min_ind])) min_ind = right;
        if(min_ind != i){
            swap(v[i], v[min_ind]);
            heapify(min_ind, n);
        }
    }

public:
    Heap(int ds = 10, bool isTrue = true){
        v.reserve(ds);
        v.push_back(-1);
        minheap = isTrue;
    }
    void push(int d){
        v.push_back(d);
        int ind = v.size()-1;
        int parent = ind/2;
        while(ind>1 && comp(v[ind],v[parent])){
            swap(v[ind], v[parent]);
            ind = parent;
            parent = parent/2;
        }
    }
    int top(){
        return v[1];
    }

    void pop(){
        int last = v.size()-1;
        swap(v[1], v[last]);
        v.pop_back();
        heapify(1, v.size()-1);
    }

    bool empty(){
        return v.size()==1;
    }

    void print(){
        for(int i=1;i<v.size();i++) cout<<v[i]<<" ";
    }
};

int main() {
    Heap h(10,false);
    int n;
    cin>>n;
    for(int i=0;i<n;i++){
        int no;
        cin>>no;
        h.push(no);
    }
    while(!h.empty()){
        cout<<h.top()<<" ";
        h.pop();
    }
    
}
