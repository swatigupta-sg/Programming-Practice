class Solution {
public:
    int dx[4] = {-1,1,0,0};
    int dy[4] = {0,0,-1,1};
    int orangesRotting(vector<vector<int>>& grid) {
        int cnt = 0;
        queue<vector<int>> q;
        int m = grid.size();
        int n = grid[0].size();
        bool visited[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.push({i,j,0});
                    visited[i][j] = true;
                } 
                else if(grid[i][j]==0) visited[i][j] = true;
                else{
                   visited[i][j] = false;
                    cnt++;
                } 
            }
        }
        if(cnt==0) return 0;
        int ans = -1;
        while(!q.empty()){
            auto node = q.front();
            int x = node[0];
            int y = node[1];
            int d = node[2];
            ans = max(ans,d);
            q.pop();
            for(int i=0;i<4;i++){
                if(x+dx[i]>=0 && x+dx[i]<m && y+dy[i]>=0 && y+dy[i]<n && grid[x+dx[i]][y+dy[i]]==1 && !visited[x+dx[i]][y+dy[i]]){
                    cnt--;
                    visited[x+dx[i]][y+dy[i]] = true;
                    q.push({x+dx[i],y+dy[i],d+1});
                }
            }
        }
        if(cnt!=0) return -1;
        return ans;
    }
};
